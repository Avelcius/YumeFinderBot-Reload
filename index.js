import 'dotenv/config';
import { Telegraf, Markup } from 'telegraf';
import { getUserSettings, updateUserSettings } from './database.js';
import { SOURCES } from './sources.js';
import { checkAccess, isAdmin, isBanned, fetchPosts } from './utils.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  if (await isBanned(ctx.from.id)) {
    return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
  }
  ctx.reply(
    'üñåÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.\n' +
    '–î–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ (@BotName —Ç–µ–≥–∏)'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /settings
bot.command('settings', async (ctx) => {
  if (await isBanned(ctx.from.id)) {
    return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
  }
  const user = await getUserSettings(ctx.from.id);
  const buttons = Object.entries(SOURCES).map(([key, { name, restricted }]) => 
    Markup.button.callback(
      restricted ? `${name} (üîí –¥–æ—Å—Ç—É–ø)` : name,
      `set_source_${key}`
    )
  );

  ctx.reply(
    `üñåÔ∏è –¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: ${SOURCES[user.source].name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:`,
    Markup.inlineKeyboard(buttons, { columns: 1 })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
bot.action(/set_source_(.+)/, async (ctx) => {
  if (await isBanned(ctx.from.id)) {
    return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
  }
  const source = ctx.match[1];
  if (!SOURCES[source]) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫');

  if (!(await checkAccess(ctx.from.id, source))) {
    return ctx.reply('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
  }

  const userSettings = await getUserSettings(ctx.from.id);
  await updateUserSettings(ctx.from.id, source, userSettings.is_subscriber, userSettings.is_admin, userSettings.is_banned);
  ctx.reply(`‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${SOURCES[source].name}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.command('admin', async (ctx) => {
  if (!(await isAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
  }
  ctx.reply(
    'üë§ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n' +
    'üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' +
    '/makeadmin <userId> ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n' +
    '/grantaccess <userId> ‚Äî –î–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º\n' +
    '/ban <userId> ‚Äî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
    '/unban <userId> ‚Äî –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /makeadmin
bot.command('makeadmin', async (ctx) => {
  if (!(await isAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
  }

  const args = ctx.message.text.split(' ');
  if (args.length !== 2) {
    return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /makeadmin <userId>');
  }

  const targetUserId = parseInt(args[1]);
  if (isNaN(targetUserId)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  const user = await getUserSettings(targetUserId);
  await updateUserSettings(targetUserId, user.source, user.is_subscriber, 1, user.is_banned);
  ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§ ${targetUserId} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
});

// –ö–æ–º–∞–Ω–¥–∞ /grantaccess
bot.command('grantaccess', async (ctx) => {
  if (!(await isAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
  }

  const args = ctx.message.text.split(' ');
  if (args.length !== 2) {
    return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grantaccess <userId>');
  }

  const targetUserId = parseInt(args[1]);
  if (isNaN(targetUserId)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  const user = await getUserSettings(targetUserId);
  await updateUserSettings(targetUserId, user.source, 1, user.is_admin, user.is_banned);
  ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§ ${targetUserId} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º`);
});

// –ö–æ–º–∞–Ω–¥–∞ /ban
bot.command('ban', async (ctx) => {
  if (!(await isAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
  }

  const args = ctx.message.text.split(' ');
  if (args.length !== 2) {
    return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <userId>');
  }

  const targetUserId = parseInt(args[1]);
  if (isNaN(targetUserId)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  const user = await getUserSettings(targetUserId);
  await updateUserSettings(targetUserId, user.source, user.is_subscriber, user.is_admin, 1);
  ctx.reply(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§ ${targetUserId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
});

// –ö–æ–º–∞–Ω–¥–∞ /unban
bot.command('unban', async (ctx) => {
  if (!(await isAdmin(ctx.from.id))) {
    return ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
  }

  const args = ctx.message.text.split(' ');
  if (args.length !== 2) {
    return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <userId>');
  }

  const targetUserId = parseInt(args[1]);
  if (isNaN(targetUserId)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  const user = await getUserSettings(targetUserId);
  if (!user.is_banned) {
    return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
  }
  await updateUserSettings(targetUserId, user.source, user.is_subscriber, user.is_admin, 0);
  ctx.reply(`üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§ ${targetUserId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
});

// –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /getaccess
bot.command('getaccess', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUserSettings(userId);
  await updateUserSettings(userId, user.source, 1, user.is_admin, user.is_banned);
  ctx.reply('‚úÖ –ü–û–ó–î–†–ê–í–õ–Ø–Æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º!');
});

// –ò–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫
bot.on('inline_query', async (ctx) => {
  const userId = ctx.inlineQuery.from.id;
  if (await isBanned(userId)) {
    return ctx.answerInlineQuery([{
      type: 'article',
      id: 'banned',
      title: '‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã',
      input_message_content: {
        message_text: '–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞'
      }
    }]);
  }

  const { query } = ctx.inlineQuery;
  const page = parseInt(ctx.inlineQuery.offset) || 1;
  if (!query.trim()) return;

  const { source } = await getUserSettings(userId);
  console.log(`–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –æ—Ç ${userId}: source=${source}, query=${query}, page=${page}`);

  if (!(await checkAccess(userId, source))) {
    return ctx.answerInlineQuery([{
      type: 'article',
      id: 'no_access',
      title: '‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω',
      input_message_content: {
        message_text: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞'
      }
    }]);
  }

  const data = await fetchPosts(source, query.trim(), page);
  if (!data || !data.results.length) {
    return ctx.answerInlineQuery([{
      type: 'article',
      id: 'no_results',
      title: 'üñåÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      input_message_content: {
        message_text: '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      }
    }]);
  }

  const results = data.results.map((post, i) => ({
    type: 'photo',
    id: `${source}_${post.id || i}_${Date.now()}`,
    photo_url: post.file_url || post.file?.url,
    thumb_url: post.preview_url || post.preview?.url || post.file_url,
    caption: `üñåÔ∏è ${SOURCES[source].caption(post)}`
  }));

  ctx.answerInlineQuery(results, {
    next_offset: data.nextPage?.toString() || '',
    cache_time: 30
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
  ctx.reply?.('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));